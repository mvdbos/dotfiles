" Packages/plugins
packadd! dracula

" This should go AFTER set nocompatible to work
set viminfo+=n~/.vim/viminfo

let mapleader = ","

set nowrap
set enc=utf-8
set hidden
set number

set tabstop=4
set softtabstop=4
set expandtab                 " Use spaces instead of tabs for indenting
set copyindent    " copy the previous indentation on autoindentingh
set shiftwidth=4  " number of spaces to use for autoindenting

set cursorline

set mouse=a
set clipboard=unnamed

" search settings
set ignorecase
set smartcase
set gdefault
set hlsearch      " highlight search terms
"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" Disabling the arrow keys to help do things the 'right' way
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" map jj to Esc
imap jj <Esc>

" Easier moving to start and end of line
nnoremap H ^
nnoremap L $

" Disable realtime gitgutter for better interaction between plugins
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

set backupdir=~/.vim/tmp/backup//
set backup
set undodir=~/.vim/tmp/undo//   " set the undo dir
set undofile                    " enable undo
set directory=~/.vim/tmp/swap//

" Better side scrolling, without the irritating jumps
set sidescroll=5

" Markdown settings
" Please note that some settings are being set in ~/.vim/after/markdown.vim,
" because settings from vim core and loaded plugins are loaded after vimrc and
" will override settings form vimrc. Everything in `after` is loaded last.
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_auto_insert_bullets=0
let g:vim_markdown_new_list_item_indent=0

au BufReadPost,BufNewFile *.md setlocal nonumber
au BufReadPost,BufNewFile *.md setlocal textwidth=0 wrapmargin=0

" These settings are for soft wrap
au BufReadPost,BufNewFile *.md setlocal linebreak wrap
au BufReadPost,BufNewFile *.md setlocal breakindent breakindentopt=shift:2
"au BufReadPost,BufNewFile *.md let &showbreak='> '

au BufReadPost,BufNewFile *.md setlocal conceallevel=2
au BufReadPost,BufNewFile *.md setlocal foldlevel=3
au BufReadPost,BufNewFile *.md setlocal ts=4 sw=4 expandtab smarttab

" enable completion from spell dict in spell mode
au BufReadPost,BufNewFile *.md setlocal complete+=kspell
" makes completions match case with typed text
au BufReadPost,BufNewFile *.md setlocal infercase

"au FileType markdown set columns=80
"autocmd VimResized,BufWinEnter,BufReadPost,BufNewFile *.md set columns=80

" Markdown folding: ensure performance by setting manual in insert mode
function! s:setFoldManual()
    let w:last_fdm = &foldmethod
    setlocal foldmethod=manual
endfunction
function! s:resFoldMethod()
    let &l:foldmethod = w:last_fdm
    silent! foldopen
endfunction
augroup fold
    autocmd!
    autocmd InsertEnter * call s:setFoldManual()
    autocmd InsertLeave * call s:resFoldMethod()
augroup END

" Completion pop-up settings
set completeopt=menu,longest

" Make <Enter> select item (C-y) instead of inserting new line if menu is open
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Make <Tab> select item (C-y) instead of inserting new line if menu is open
inoremap <expr> <tab> pumvisible() ? "\<C-y>" : "\<tab>"

" Set the height of the completion menu. 0 = all available space
set pumheight=5

" <C-N> work the way it normally does; however, when the menu appears,
" the <Down> key will be simulated. What this accomplishes is it keeps a menu
" item always highlighted. This way you can keep typing characters to narrow
" the matches, and the nearest match will be selected so that you can hit Enter at any time to insert it.
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Set compat settings before Dracula colorscheme is loaded
let g:dracula_colorterm = 0
let g:dracula_italic = 0

" gv keeps visual selection after indent operation
vnoremap > >gv
vnoremap < <gv

colorscheme dracula

let g:airline_powerline_fonts = 0

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_section_z = '%p%% %l/%L:%v'
let g:airline#extensions#wordcount#formatter#default#fmt = '%sW'
let g:airline#extensions#wordcount#formatter#default#fmt_short = '%sW'
" Only show file format if it is NOT unix UTF-8
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'

" Uncomment to enable tabs as buffers
"set switchbuf=newtab,usetab
"au BufNewFile,BufReadPost * setlocal bufhidden=delete

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_min_count = 0
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#clock#auto = 1
let g:airline#extensions#clock#format = 'â—· %H:%M'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_theme='dracula'

nnoremap <leader>q :bp <BAR> bd #<CR>
cnoremap bd :bp <BAR> bd #<CR>
nnoremap <leader>b :ls<CR>:b<space>
nnoremap ]b :bnext<CR>
nnoremap [b :bprevious<CR>

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Vim indent guides settings
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" NerdTree settings
map <Leader>n <ESC>:NERDTreeToggle<CR>
let NERDTreeShowHidden=0
let NERDTreeMinimalUI=1
let NERDTreeQuitOnOpen=1
let NERDTreeRespectWildIgnore=1
let NERDTreeAutoDeleteBuffer=1
let NERDTreeShowBookmarks=1
" Uncomment this to always open in a new tab
"let NERDTreeCustomOpenArgs={'file': {'reuse': 'all', 'where': 't'}, 'dir': {}}

" auto open NERDTree if vim is called with no args or dir arg
function! NERDTreeStartUp()
    if !argc() && !exists("s:std_in")
        NERDTreeFocus
    end
    if argc() && isdirectory(argv()[0]) && !exists("s:std_in")
        exe 'NERDTree' argv()[0]
        wincmd p
        ene
        exe 'cd '.argv()[0]
        NERDTreeFocus
    end
endfunction

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * call NERDTreeStartUp()

"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Shortcuts for split windows
nnoremap <leader>w <C-w>v<C-w>l

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


set spelllang=en
nmap <silent> <leader>s :setlocal spell! <CR>

" Whitespace fixes
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
augroup whitespace
    autocmd!
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
augroup END

" Bclose() {{{2
" delete buffer without closing window
" We need this to prevent tagbar closing vim on :bd

"cmap bd call Bclose()
function! Bclose()
    let curbufnr = bufnr("%")
    let altbufnr = bufnr("#")

    if buflisted(altbufnr)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == curbufnr
        new
    endif

    if buflisted(curbufnr)
        execute("bdelete! " . curbufnr)
    endif
endfunction

fun! TrimWhitespace()
    let l:save = winsaveview()
    %s/\s\+$//e
    call winrestview(l:save)
endfun

"autocmd FileType c,cpp,python,ruby,java,php,text,vim autocmd BufWritePre * :call TrimWhitespace()
:noremap <Leader>sw :call TrimWhitespace()<CR>

"superscript mapping ---------------------- {{{
execute "digraphs xS " . 0x02E3
"}}}

"Enable the Silver Seacher (ag)
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --hidden\ --vimgrep\ --nogroup\ --nocolor\ --silent

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
nnoremap \| :Ag<SPACE><C-R><C-W><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" START: ToggleComment() functionality
""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType c,cpp,java,kotlin let b:comment_leader = '//'
autocmd FileType bash,sh,zsh,ruby,python  let b:comment_leader = '#'
autocmd FileType conf,fstab      let b:comment_leader = '#'
autocmd FileType matlab,tex      let b:comment_leader = '%'
autocmd FileType vim             let b:comment_leader = '"'

" l:pos   --> cursor position
" l:space --> how many spaces we will use b:comment_leader + ' '

function! ToggleComment()
    if exists('b:comment_leader')
        let l:pos = col('.')
        let l:space = ( &ft =~ '\v(c|cpp|java|arduino)' ? '3' : '2' )
        if getline('.') =~ '\v(\s*|\t*)' .b:comment_leader
            let l:space -= ( getline('.') =~ '\v.*\zs' . b:comment_leader . '(\s+|\t+)@!' ?  1 : 0 )
            execute 'silent s,\v^(\s*|\t*)\zs' .b:comment_leader.'[ ]?,,g'
            let l:pos -= l:space
        else
            exec 'normal! 0i' .b:comment_leader .' '
            let l:pos += l:space
        endif
        call cursor(line("."), l:pos)
    else
        echo 'no comment leader found for filetype'
    end
endfunction

nnoremap <Leader>t :call ToggleComment()<CR>
inoremap <Leader>t <C-o>:call ToggleComment()<CR>
xnoremap <Leader>t :'<,'>call ToggleComment()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" END: ToggleComment() functionality
""""""""""""""""""""""""""""""""""""""""""""""""""

" Always paste from the first register, which we yank to by default. 
" This way, purposeful yanks are not overwritten by deletions.
" Vim registers become effectively disabled by this.
function! ToggleFixedRegisterPaste()
    if mapcheck("p", "n") == ""
        noremap p "0p
        echo 'Fixed register paste on'
    else
        unmap c
        echo 'Fixed register paste off'
    endif
endfunction
nnoremap <leader>p :call ToggleFixedRegisterPaste()<CR>

" Do we have local vimrc?
" If so, go ahead and load it.
execute "silent! source ~/.vimrc.local"
